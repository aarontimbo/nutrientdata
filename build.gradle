task wrapper(type: Wrapper) {
    gradleVersion = '1.10'
}

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            url 'http://repo.jfrog.org/artifactory/gradle-plugins'
        }
        ivy {
            url "http://dl.bintray.com/content/johnrengelman/gradle-plugins"
            layout "maven"
        }
    }
    dependencies {
        //classpath "net.saliman:gradle-cobertura-plugin:1.1.0"
        classpath 'org.jfrog.buildinfo:build-info-extractor-gradle:2.0.16'
        classpath 'org.gradle.plugins:shadow:0.6'
    }
}

//apply plugin: 'cobertura'
//apply plugin: 'codenarc'
apply plugin: 'groovy'

apply plugin: 'maven'

group = 'com.atimbo'
version = "${currentVersion}"

apply plugin: 'shadow'

apply plugin: 'application'

// Run code narc before the test phase begins
//test.dependsOn codenarcMain

repositories {
    mavenLocal()
    mavenCentral()
    // Spock snapshots are available from the Sonatype OSS snapshot repository
    maven { url "http://oss.sonatype.org/content/repositories/snapshots/" }
}

// The main class of the application
mainClassName = 'com.atimbo.fitness.nutrient.NutrientDataService'

dependencies {
    compile "org.codehaus.groovy:groovy-all:${groovyVersion}"

    compile "com.yammer.dropwizard:dropwizard-core:${dropwizardVersion}"
    compile "com.yammer.dropwizard:dropwizard-hibernate:${dropwizardVersion}"
    compile "com.yammer.dropwizard:dropwizard-migrations:${dropwizardVersion}"
    compile "com.yammer.dropwizard:dropwizard-client:${dropwizardVersion}"

    compile 'org.eclipse.jetty:jetty-servlets:8.1.8.v20121106'
    compile 'com.sun.jersey:jersey-client:1.18'

    // DB
    //compile 'mysql:mysql-connector-java:5.1.25'
    compile 'org.postgresql:postgresql:9.3-1100-jdbc4'

    testCompile "com.yammer.dropwizard:dropwizard-testing:${dropwizardVersion}"
    testCompile "org.spockframework:spock-core:${spockVersion}"
    testCompile 'junit:junit:4.11'
    testCompile 'com.h2database:h2:1.3.168'
}

jar {
    manifest {
        attributes 'Main-Class': 'com.atimbo.fitness.nutrient.NutrientDataService'
        attributes 'Built-Date': new Date() //now
        attributes 'Built-By': System.getProperty('user.name')
        attributes 'Build-Jdk': System.getProperty('java.version')
        attributes 'Implementation-Title': project.name
        attributes 'Implementation-Version': project.version
        attributes 'Implementation-Vendor-Id': project.group
    }
}
/*
codenarc {
    configFile = rootProject.file('codenarcrule.groovy')
    reportFormat = System.properties['codeNarcOutput'] ?: 'html'
}
*/
shadow {
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'
}
/*
task run(dependsOn: 'shadow', group: 'dropwizard',  description: "Run service using dev configuration") << {
    // Grab any dw. properties that are specified on the command line and pass to the Java process (i.e. dw.http.port=8080)
    def props = project.ext.properties.findAll { it.key.startsWith('dw') }
    javaexec {
        main = '-jar'
        args = ["${shadow.shadowJar.getPath()}", 'server', 'dev_config.yml']
        systemProperties = props
    }
}
  */
task migrate(dependsOn: 'shadow', group: 'dropwizard', description: "Run migrations using the dev configuration") << {
    javaexec {
        main = '-jar'
        args = ["${shadow.shadowJar.getPath()}", 'db', 'migrate', 'dev_config.yml']
    }
}

task dropAll(dependsOn: 'shadow', group: 'dropwizard',  description: "Run drop-all database command") << {
    javaexec {
        main = '-jar'
        args = ["${shadow.shadowJar.getPath()}", 'db', 'drop-all', 'dev_config.yml', '--confirm-delete-everything']
    }
}

task stage(dependsOn: ['wrapper', 'shadow', 'clean', 'installApp'], description: "Heroku runs this by default")